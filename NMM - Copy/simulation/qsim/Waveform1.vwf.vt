// Copyright (C) 2023  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/11/2023 14:09:51"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          nmm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module nmm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg b0;
reg b1;
reg b2;
reg b3;
reg clk;
reg sqr_in;
reg sqr_out;
// wires                                               
wire [11:0] A;
wire [9:0] AT;
wire c_out;
wire [3:0] DC;
wire [9:0] M;
wire [9:0] MC;
wire [15:0] T;

// assign statements (if any)                          
nmm i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.AT(AT),
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.c_out(c_out),
	.clk(clk),
	.DC(DC),
	.M(M),
	.MC(MC),
	.sqr_in(sqr_in),
	.sqr_out(sqr_out),
	.T(T)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// sqr_in
initial
begin
	repeat(6)
	begin
		sqr_in = 1'b0;
		sqr_in = #80000 1'b1;
		# 80000;
	end
	sqr_in = 1'b0;
end 

// sqr_out
initial
begin
	sqr_out = 1'b1;
	# 40000;
	repeat(6)
	begin
		sqr_out = 1'b0;
		sqr_out = #80000 1'b1;
		# 80000;
	end
end 
endmodule

