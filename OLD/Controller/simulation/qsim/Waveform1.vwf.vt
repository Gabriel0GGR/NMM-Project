// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/10/2023 15:41:10"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    controller
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module controller_vlg_sample_tst(
	clk,
	CR,
	I,
	load,
	LR,
	sampler_tx
);
input  clk;
input [3:0] CR;
input [11:0] I;
input  load;
input [1:0] LR;
output sampler_tx;

reg sample;
time current_time;
always @(clk or CR or I or load or LR)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module controller_vlg_check_tst (
	A,
	AT,
	DC,
	M,
	MC,
	T,
	sampler_rx
);
input [11:0] A;
input [9:0] AT;
input [3:0] DC;
input [9:0] M;
input [9:0] MC;
input [15:0] T;
input sampler_rx;

reg [11:0] A_expected;
reg [9:0] AT_expected;
reg [3:0] DC_expected;
reg [9:0] M_expected;
reg [9:0] MC_expected;
reg [15:0] T_expected;

reg [11:0] A_prev;
reg [9:0] AT_prev;
reg [3:0] DC_prev;
reg [9:0] M_prev;
reg [9:0] MC_prev;
reg [15:0] T_prev;

reg [11:0] A_expected_prev;
reg [9:0] AT_expected_prev;
reg [3:0] DC_expected_prev;
reg [9:0] M_expected_prev;
reg [9:0] MC_expected_prev;
reg [15:0] T_expected_prev;

reg [11:0] last_A_exp;
reg [9:0] last_AT_exp;
reg [3:0] last_DC_exp;
reg [9:0] last_M_exp;
reg [9:0] last_MC_exp;
reg [15:0] last_T_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:6] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 6'b1;
end

// update real /o prevs

always @(trigger)
begin
	A_prev = A;
	AT_prev = AT;
	DC_prev = DC;
	M_prev = M;
	MC_prev = MC;
	T_prev = T;
end

// update expected /o prevs

always @(trigger)
begin
	A_expected_prev = A_expected;
	AT_expected_prev = AT_expected;
	DC_expected_prev = DC_expected;
	M_expected_prev = M_expected;
	MC_expected_prev = MC_expected;
	T_expected_prev = T_expected;
end


// expected DC[ 3 ]
initial
begin
	DC_expected[3] = 1'bX;
end 
// expected DC[ 2 ]
initial
begin
	DC_expected[2] = 1'bX;
end 
// expected DC[ 1 ]
initial
begin
	DC_expected[1] = 1'bX;
end 
// expected DC[ 0 ]
initial
begin
	DC_expected[0] = 1'bX;
end 
// expected AT[ 9 ]
initial
begin
	AT_expected[9] = 1'bX;
end 
// expected AT[ 8 ]
initial
begin
	AT_expected[8] = 1'bX;
end 
// expected AT[ 7 ]
initial
begin
	AT_expected[7] = 1'bX;
end 
// expected AT[ 6 ]
initial
begin
	AT_expected[6] = 1'bX;
end 
// expected AT[ 5 ]
initial
begin
	AT_expected[5] = 1'bX;
end 
// expected AT[ 4 ]
initial
begin
	AT_expected[4] = 1'bX;
end 
// expected AT[ 3 ]
initial
begin
	AT_expected[3] = 1'bX;
end 
// expected AT[ 2 ]
initial
begin
	AT_expected[2] = 1'bX;
end 
// expected AT[ 1 ]
initial
begin
	AT_expected[1] = 1'bX;
end 
// expected AT[ 0 ]
initial
begin
	AT_expected[0] = 1'bX;
end 
// expected MC[ 9 ]
initial
begin
	MC_expected[9] = 1'bX;
end 
// expected MC[ 8 ]
initial
begin
	MC_expected[8] = 1'bX;
end 
// expected MC[ 7 ]
initial
begin
	MC_expected[7] = 1'bX;
end 
// expected MC[ 6 ]
initial
begin
	MC_expected[6] = 1'bX;
end 
// expected MC[ 5 ]
initial
begin
	MC_expected[5] = 1'bX;
end 
// expected MC[ 4 ]
initial
begin
	MC_expected[4] = 1'bX;
end 
// expected MC[ 3 ]
initial
begin
	MC_expected[3] = 1'bX;
end 
// expected MC[ 2 ]
initial
begin
	MC_expected[2] = 1'bX;
end 
// expected MC[ 1 ]
initial
begin
	MC_expected[1] = 1'bX;
end 
// expected MC[ 0 ]
initial
begin
	MC_expected[0] = 1'bX;
end 
// expected A[ 11 ]
initial
begin
	A_expected[11] = 1'bX;
end 
// expected A[ 10 ]
initial
begin
	A_expected[10] = 1'bX;
end 
// expected A[ 9 ]
initial
begin
	A_expected[9] = 1'bX;
end 
// expected A[ 8 ]
initial
begin
	A_expected[8] = 1'bX;
end 
// expected A[ 7 ]
initial
begin
	A_expected[7] = 1'bX;
end 
// expected A[ 6 ]
initial
begin
	A_expected[6] = 1'bX;
end 
// expected A[ 5 ]
initial
begin
	A_expected[5] = 1'bX;
end 
// expected A[ 4 ]
initial
begin
	A_expected[4] = 1'bX;
end 
// expected A[ 3 ]
initial
begin
	A_expected[3] = 1'bX;
end 
// expected A[ 2 ]
initial
begin
	A_expected[2] = 1'bX;
end 
// expected A[ 1 ]
initial
begin
	A_expected[1] = 1'bX;
end 
// expected A[ 0 ]
initial
begin
	A_expected[0] = 1'bX;
end 
// expected T[ 15 ]
initial
begin
	T_expected[15] = 1'bX;
end 
// expected T[ 14 ]
initial
begin
	T_expected[14] = 1'bX;
end 
// expected T[ 13 ]
initial
begin
	T_expected[13] = 1'bX;
end 
// expected T[ 12 ]
initial
begin
	T_expected[12] = 1'bX;
end 
// expected T[ 11 ]
initial
begin
	T_expected[11] = 1'bX;
end 
// expected T[ 10 ]
initial
begin
	T_expected[10] = 1'bX;
end 
// expected T[ 9 ]
initial
begin
	T_expected[9] = 1'bX;
end 
// expected T[ 8 ]
initial
begin
	T_expected[8] = 1'bX;
end 
// expected T[ 7 ]
initial
begin
	T_expected[7] = 1'bX;
end 
// expected T[ 6 ]
initial
begin
	T_expected[6] = 1'bX;
end 
// expected T[ 5 ]
initial
begin
	T_expected[5] = 1'bX;
end 
// expected T[ 4 ]
initial
begin
	T_expected[4] = 1'bX;
end 
// expected T[ 3 ]
initial
begin
	T_expected[3] = 1'bX;
end 
// expected T[ 2 ]
initial
begin
	T_expected[2] = 1'bX;
end 
// expected T[ 1 ]
initial
begin
	T_expected[1] = 1'bX;
end 
// expected T[ 0 ]
initial
begin
	T_expected[0] = 1'bX;
end 
// expected M[ 9 ]
initial
begin
	M_expected[9] = 1'bX;
end 
// expected M[ 8 ]
initial
begin
	M_expected[8] = 1'bX;
end 
// expected M[ 7 ]
initial
begin
	M_expected[7] = 1'bX;
end 
// expected M[ 6 ]
initial
begin
	M_expected[6] = 1'bX;
end 
// expected M[ 5 ]
initial
begin
	M_expected[5] = 1'bX;
end 
// expected M[ 4 ]
initial
begin
	M_expected[4] = 1'bX;
end 
// expected M[ 3 ]
initial
begin
	M_expected[3] = 1'bX;
end 
// expected M[ 2 ]
initial
begin
	M_expected[2] = 1'bX;
end 
// expected M[ 1 ]
initial
begin
	M_expected[1] = 1'bX;
end 
// expected M[ 0 ]
initial
begin
	M_expected[0] = 1'bX;
end 
// generate trigger
always @(A_expected or A or AT_expected or AT or DC_expected or DC or M_expected or M or MC_expected or MC or T_expected or T)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected A = %b | expected AT = %b | expected DC = %b | expected M = %b | expected MC = %b | expected T = %b | ",A_expected_prev,AT_expected_prev,DC_expected_prev,M_expected_prev,MC_expected_prev,T_expected_prev);
	$display("| real A = %b | real AT = %b | real DC = %b | real M = %b | real MC = %b | real T = %b | ",A_prev,AT_prev,DC_prev,M_prev,MC_prev,T_prev);
`endif
	if (
		( A_expected_prev[0] !== 1'bx ) && ( A_prev[0] !== A_expected_prev[0] )
		&& ((A_expected_prev[0] !== last_A_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[0] = A_expected_prev[0];
	end
	if (
		( A_expected_prev[1] !== 1'bx ) && ( A_prev[1] !== A_expected_prev[1] )
		&& ((A_expected_prev[1] !== last_A_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[1] = A_expected_prev[1];
	end
	if (
		( A_expected_prev[2] !== 1'bx ) && ( A_prev[2] !== A_expected_prev[2] )
		&& ((A_expected_prev[2] !== last_A_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[2] = A_expected_prev[2];
	end
	if (
		( A_expected_prev[3] !== 1'bx ) && ( A_prev[3] !== A_expected_prev[3] )
		&& ((A_expected_prev[3] !== last_A_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[3] = A_expected_prev[3];
	end
	if (
		( A_expected_prev[4] !== 1'bx ) && ( A_prev[4] !== A_expected_prev[4] )
		&& ((A_expected_prev[4] !== last_A_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[4] = A_expected_prev[4];
	end
	if (
		( A_expected_prev[5] !== 1'bx ) && ( A_prev[5] !== A_expected_prev[5] )
		&& ((A_expected_prev[5] !== last_A_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[5] = A_expected_prev[5];
	end
	if (
		( A_expected_prev[6] !== 1'bx ) && ( A_prev[6] !== A_expected_prev[6] )
		&& ((A_expected_prev[6] !== last_A_exp[6]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[6] = A_expected_prev[6];
	end
	if (
		( A_expected_prev[7] !== 1'bx ) && ( A_prev[7] !== A_expected_prev[7] )
		&& ((A_expected_prev[7] !== last_A_exp[7]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[7] = A_expected_prev[7];
	end
	if (
		( A_expected_prev[8] !== 1'bx ) && ( A_prev[8] !== A_expected_prev[8] )
		&& ((A_expected_prev[8] !== last_A_exp[8]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[8] = A_expected_prev[8];
	end
	if (
		( A_expected_prev[9] !== 1'bx ) && ( A_prev[9] !== A_expected_prev[9] )
		&& ((A_expected_prev[9] !== last_A_exp[9]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[9] = A_expected_prev[9];
	end
	if (
		( A_expected_prev[10] !== 1'bx ) && ( A_prev[10] !== A_expected_prev[10] )
		&& ((A_expected_prev[10] !== last_A_exp[10]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[10] = A_expected_prev[10];
	end
	if (
		( A_expected_prev[11] !== 1'bx ) && ( A_prev[11] !== A_expected_prev[11] )
		&& ((A_expected_prev[11] !== last_A_exp[11]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port A[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", A_expected_prev);
		$display ("     Real value = %b", A_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_A_exp[11] = A_expected_prev[11];
	end
	if (
		( AT_expected_prev[0] !== 1'bx ) && ( AT_prev[0] !== AT_expected_prev[0] )
		&& ((AT_expected_prev[0] !== last_AT_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AT[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AT_expected_prev);
		$display ("     Real value = %b", AT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AT_exp[0] = AT_expected_prev[0];
	end
	if (
		( AT_expected_prev[1] !== 1'bx ) && ( AT_prev[1] !== AT_expected_prev[1] )
		&& ((AT_expected_prev[1] !== last_AT_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AT[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AT_expected_prev);
		$display ("     Real value = %b", AT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AT_exp[1] = AT_expected_prev[1];
	end
	if (
		( AT_expected_prev[2] !== 1'bx ) && ( AT_prev[2] !== AT_expected_prev[2] )
		&& ((AT_expected_prev[2] !== last_AT_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AT[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AT_expected_prev);
		$display ("     Real value = %b", AT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AT_exp[2] = AT_expected_prev[2];
	end
	if (
		( AT_expected_prev[3] !== 1'bx ) && ( AT_prev[3] !== AT_expected_prev[3] )
		&& ((AT_expected_prev[3] !== last_AT_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AT[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AT_expected_prev);
		$display ("     Real value = %b", AT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AT_exp[3] = AT_expected_prev[3];
	end
	if (
		( AT_expected_prev[4] !== 1'bx ) && ( AT_prev[4] !== AT_expected_prev[4] )
		&& ((AT_expected_prev[4] !== last_AT_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AT[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AT_expected_prev);
		$display ("     Real value = %b", AT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AT_exp[4] = AT_expected_prev[4];
	end
	if (
		( AT_expected_prev[5] !== 1'bx ) && ( AT_prev[5] !== AT_expected_prev[5] )
		&& ((AT_expected_prev[5] !== last_AT_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AT[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AT_expected_prev);
		$display ("     Real value = %b", AT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AT_exp[5] = AT_expected_prev[5];
	end
	if (
		( AT_expected_prev[6] !== 1'bx ) && ( AT_prev[6] !== AT_expected_prev[6] )
		&& ((AT_expected_prev[6] !== last_AT_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AT[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AT_expected_prev);
		$display ("     Real value = %b", AT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AT_exp[6] = AT_expected_prev[6];
	end
	if (
		( AT_expected_prev[7] !== 1'bx ) && ( AT_prev[7] !== AT_expected_prev[7] )
		&& ((AT_expected_prev[7] !== last_AT_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AT[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AT_expected_prev);
		$display ("     Real value = %b", AT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AT_exp[7] = AT_expected_prev[7];
	end
	if (
		( AT_expected_prev[8] !== 1'bx ) && ( AT_prev[8] !== AT_expected_prev[8] )
		&& ((AT_expected_prev[8] !== last_AT_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AT[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AT_expected_prev);
		$display ("     Real value = %b", AT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AT_exp[8] = AT_expected_prev[8];
	end
	if (
		( AT_expected_prev[9] !== 1'bx ) && ( AT_prev[9] !== AT_expected_prev[9] )
		&& ((AT_expected_prev[9] !== last_AT_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AT[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AT_expected_prev);
		$display ("     Real value = %b", AT_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AT_exp[9] = AT_expected_prev[9];
	end
	if (
		( DC_expected_prev[0] !== 1'bx ) && ( DC_prev[0] !== DC_expected_prev[0] )
		&& ((DC_expected_prev[0] !== last_DC_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DC_expected_prev);
		$display ("     Real value = %b", DC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DC_exp[0] = DC_expected_prev[0];
	end
	if (
		( DC_expected_prev[1] !== 1'bx ) && ( DC_prev[1] !== DC_expected_prev[1] )
		&& ((DC_expected_prev[1] !== last_DC_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DC_expected_prev);
		$display ("     Real value = %b", DC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DC_exp[1] = DC_expected_prev[1];
	end
	if (
		( DC_expected_prev[2] !== 1'bx ) && ( DC_prev[2] !== DC_expected_prev[2] )
		&& ((DC_expected_prev[2] !== last_DC_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DC_expected_prev);
		$display ("     Real value = %b", DC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DC_exp[2] = DC_expected_prev[2];
	end
	if (
		( DC_expected_prev[3] !== 1'bx ) && ( DC_prev[3] !== DC_expected_prev[3] )
		&& ((DC_expected_prev[3] !== last_DC_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DC_expected_prev);
		$display ("     Real value = %b", DC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_DC_exp[3] = DC_expected_prev[3];
	end
	if (
		( M_expected_prev[0] !== 1'bx ) && ( M_prev[0] !== M_expected_prev[0] )
		&& ((M_expected_prev[0] !== last_M_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_M_exp[0] = M_expected_prev[0];
	end
	if (
		( M_expected_prev[1] !== 1'bx ) && ( M_prev[1] !== M_expected_prev[1] )
		&& ((M_expected_prev[1] !== last_M_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_M_exp[1] = M_expected_prev[1];
	end
	if (
		( M_expected_prev[2] !== 1'bx ) && ( M_prev[2] !== M_expected_prev[2] )
		&& ((M_expected_prev[2] !== last_M_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_M_exp[2] = M_expected_prev[2];
	end
	if (
		( M_expected_prev[3] !== 1'bx ) && ( M_prev[3] !== M_expected_prev[3] )
		&& ((M_expected_prev[3] !== last_M_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_M_exp[3] = M_expected_prev[3];
	end
	if (
		( M_expected_prev[4] !== 1'bx ) && ( M_prev[4] !== M_expected_prev[4] )
		&& ((M_expected_prev[4] !== last_M_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_M_exp[4] = M_expected_prev[4];
	end
	if (
		( M_expected_prev[5] !== 1'bx ) && ( M_prev[5] !== M_expected_prev[5] )
		&& ((M_expected_prev[5] !== last_M_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_M_exp[5] = M_expected_prev[5];
	end
	if (
		( M_expected_prev[6] !== 1'bx ) && ( M_prev[6] !== M_expected_prev[6] )
		&& ((M_expected_prev[6] !== last_M_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_M_exp[6] = M_expected_prev[6];
	end
	if (
		( M_expected_prev[7] !== 1'bx ) && ( M_prev[7] !== M_expected_prev[7] )
		&& ((M_expected_prev[7] !== last_M_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_M_exp[7] = M_expected_prev[7];
	end
	if (
		( M_expected_prev[8] !== 1'bx ) && ( M_prev[8] !== M_expected_prev[8] )
		&& ((M_expected_prev[8] !== last_M_exp[8]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_M_exp[8] = M_expected_prev[8];
	end
	if (
		( M_expected_prev[9] !== 1'bx ) && ( M_prev[9] !== M_expected_prev[9] )
		&& ((M_expected_prev[9] !== last_M_exp[9]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port M[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", M_expected_prev);
		$display ("     Real value = %b", M_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_M_exp[9] = M_expected_prev[9];
	end
	if (
		( MC_expected_prev[0] !== 1'bx ) && ( MC_prev[0] !== MC_expected_prev[0] )
		&& ((MC_expected_prev[0] !== last_MC_exp[0]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MC[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MC_expected_prev);
		$display ("     Real value = %b", MC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MC_exp[0] = MC_expected_prev[0];
	end
	if (
		( MC_expected_prev[1] !== 1'bx ) && ( MC_prev[1] !== MC_expected_prev[1] )
		&& ((MC_expected_prev[1] !== last_MC_exp[1]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MC[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MC_expected_prev);
		$display ("     Real value = %b", MC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MC_exp[1] = MC_expected_prev[1];
	end
	if (
		( MC_expected_prev[2] !== 1'bx ) && ( MC_prev[2] !== MC_expected_prev[2] )
		&& ((MC_expected_prev[2] !== last_MC_exp[2]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MC[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MC_expected_prev);
		$display ("     Real value = %b", MC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MC_exp[2] = MC_expected_prev[2];
	end
	if (
		( MC_expected_prev[3] !== 1'bx ) && ( MC_prev[3] !== MC_expected_prev[3] )
		&& ((MC_expected_prev[3] !== last_MC_exp[3]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MC[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MC_expected_prev);
		$display ("     Real value = %b", MC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MC_exp[3] = MC_expected_prev[3];
	end
	if (
		( MC_expected_prev[4] !== 1'bx ) && ( MC_prev[4] !== MC_expected_prev[4] )
		&& ((MC_expected_prev[4] !== last_MC_exp[4]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MC[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MC_expected_prev);
		$display ("     Real value = %b", MC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MC_exp[4] = MC_expected_prev[4];
	end
	if (
		( MC_expected_prev[5] !== 1'bx ) && ( MC_prev[5] !== MC_expected_prev[5] )
		&& ((MC_expected_prev[5] !== last_MC_exp[5]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MC[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MC_expected_prev);
		$display ("     Real value = %b", MC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MC_exp[5] = MC_expected_prev[5];
	end
	if (
		( MC_expected_prev[6] !== 1'bx ) && ( MC_prev[6] !== MC_expected_prev[6] )
		&& ((MC_expected_prev[6] !== last_MC_exp[6]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MC[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MC_expected_prev);
		$display ("     Real value = %b", MC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MC_exp[6] = MC_expected_prev[6];
	end
	if (
		( MC_expected_prev[7] !== 1'bx ) && ( MC_prev[7] !== MC_expected_prev[7] )
		&& ((MC_expected_prev[7] !== last_MC_exp[7]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MC[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MC_expected_prev);
		$display ("     Real value = %b", MC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MC_exp[7] = MC_expected_prev[7];
	end
	if (
		( MC_expected_prev[8] !== 1'bx ) && ( MC_prev[8] !== MC_expected_prev[8] )
		&& ((MC_expected_prev[8] !== last_MC_exp[8]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MC[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MC_expected_prev);
		$display ("     Real value = %b", MC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MC_exp[8] = MC_expected_prev[8];
	end
	if (
		( MC_expected_prev[9] !== 1'bx ) && ( MC_prev[9] !== MC_expected_prev[9] )
		&& ((MC_expected_prev[9] !== last_MC_exp[9]) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MC[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MC_expected_prev);
		$display ("     Real value = %b", MC_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_MC_exp[9] = MC_expected_prev[9];
	end
	if (
		( T_expected_prev[0] !== 1'bx ) && ( T_prev[0] !== T_expected_prev[0] )
		&& ((T_expected_prev[0] !== last_T_exp[0]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_T_exp[0] = T_expected_prev[0];
	end
	if (
		( T_expected_prev[1] !== 1'bx ) && ( T_prev[1] !== T_expected_prev[1] )
		&& ((T_expected_prev[1] !== last_T_exp[1]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_T_exp[1] = T_expected_prev[1];
	end
	if (
		( T_expected_prev[2] !== 1'bx ) && ( T_prev[2] !== T_expected_prev[2] )
		&& ((T_expected_prev[2] !== last_T_exp[2]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_T_exp[2] = T_expected_prev[2];
	end
	if (
		( T_expected_prev[3] !== 1'bx ) && ( T_prev[3] !== T_expected_prev[3] )
		&& ((T_expected_prev[3] !== last_T_exp[3]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_T_exp[3] = T_expected_prev[3];
	end
	if (
		( T_expected_prev[4] !== 1'bx ) && ( T_prev[4] !== T_expected_prev[4] )
		&& ((T_expected_prev[4] !== last_T_exp[4]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_T_exp[4] = T_expected_prev[4];
	end
	if (
		( T_expected_prev[5] !== 1'bx ) && ( T_prev[5] !== T_expected_prev[5] )
		&& ((T_expected_prev[5] !== last_T_exp[5]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_T_exp[5] = T_expected_prev[5];
	end
	if (
		( T_expected_prev[6] !== 1'bx ) && ( T_prev[6] !== T_expected_prev[6] )
		&& ((T_expected_prev[6] !== last_T_exp[6]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_T_exp[6] = T_expected_prev[6];
	end
	if (
		( T_expected_prev[7] !== 1'bx ) && ( T_prev[7] !== T_expected_prev[7] )
		&& ((T_expected_prev[7] !== last_T_exp[7]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_T_exp[7] = T_expected_prev[7];
	end
	if (
		( T_expected_prev[8] !== 1'bx ) && ( T_prev[8] !== T_expected_prev[8] )
		&& ((T_expected_prev[8] !== last_T_exp[8]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_T_exp[8] = T_expected_prev[8];
	end
	if (
		( T_expected_prev[9] !== 1'bx ) && ( T_prev[9] !== T_expected_prev[9] )
		&& ((T_expected_prev[9] !== last_T_exp[9]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_T_exp[9] = T_expected_prev[9];
	end
	if (
		( T_expected_prev[10] !== 1'bx ) && ( T_prev[10] !== T_expected_prev[10] )
		&& ((T_expected_prev[10] !== last_T_exp[10]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_T_exp[10] = T_expected_prev[10];
	end
	if (
		( T_expected_prev[11] !== 1'bx ) && ( T_prev[11] !== T_expected_prev[11] )
		&& ((T_expected_prev[11] !== last_T_exp[11]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_T_exp[11] = T_expected_prev[11];
	end
	if (
		( T_expected_prev[12] !== 1'bx ) && ( T_prev[12] !== T_expected_prev[12] )
		&& ((T_expected_prev[12] !== last_T_exp[12]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_T_exp[12] = T_expected_prev[12];
	end
	if (
		( T_expected_prev[13] !== 1'bx ) && ( T_prev[13] !== T_expected_prev[13] )
		&& ((T_expected_prev[13] !== last_T_exp[13]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_T_exp[13] = T_expected_prev[13];
	end
	if (
		( T_expected_prev[14] !== 1'bx ) && ( T_prev[14] !== T_expected_prev[14] )
		&& ((T_expected_prev[14] !== last_T_exp[14]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_T_exp[14] = T_expected_prev[14];
	end
	if (
		( T_expected_prev[15] !== 1'bx ) && ( T_prev[15] !== T_expected_prev[15] )
		&& ((T_expected_prev[15] !== last_T_exp[15]) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T_expected_prev);
		$display ("     Real value = %b", T_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_T_exp[15] = T_expected_prev[15];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module controller_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] CR;
reg [11:0] I;
reg load;
reg [1:0] LR;
// wires                                               
wire [11:0] A;
wire [9:0] AT;
wire [3:0] DC;
wire [9:0] M;
wire [9:0] MC;
wire [15:0] T;

wire sampler;                             

// assign statements (if any)                          
controller i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.AT(AT),
	.clk(clk),
	.CR(CR),
	.DC(DC),
	.I(I),
	.load(load),
	.LR(LR),
	.M(M),
	.MC(MC),
	.T(T)
);
// I[ 11 ]
initial
begin
	I[11] = 1'b0;
end 
// I[ 10 ]
initial
begin
	I[10] = 1'b0;
end 
// I[ 9 ]
initial
begin
	I[9] = 1'b0;
end 
// I[ 8 ]
initial
begin
	I[8] = 1'b0;
end 
// I[ 7 ]
initial
begin
	I[7] = 1'b0;
end 
// I[ 6 ]
initial
begin
	I[6] = 1'b0;
end 
// I[ 5 ]
initial
begin
	I[5] = 1'b0;
	I[5] = #80000 1'b1;
	I[5] = #320000 1'b0;
end 
// I[ 4 ]
initial
begin
	I[4] = 1'b0;
end 
// I[ 3 ]
initial
begin
	I[3] = 1'b0;
	I[3] = #80000 1'b1;
	I[3] = #320000 1'b0;
end 
// I[ 2 ]
initial
begin
	I[2] = 1'b0;
	I[2] = #80000 1'b1;
	I[2] = #320000 1'b0;
end 
// I[ 1 ]
initial
begin
	I[1] = 1'b0;
	I[1] = #160000 1'b1;
	I[1] = #240000 1'b0;
end 
// I[ 0 ]
initial
begin
	I[0] = 1'b0;
	I[0] = #80000 1'b1;
	I[0] = #160000 1'b0;
	I[0] = #80000 1'b1;
	I[0] = #80000 1'b0;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #10000 1'b1;
	#10000;
end 

// load
initial
begin
	repeat(12)
	begin
		load = 1'b0;
		load = #40000 1'b1;
		# 40000;
	end
	load = 1'b0;
end 
// LR[ 1 ]
initial
begin
	LR[1] = 1'b0;
end 
// LR[ 0 ]
initial
begin
	LR[0] = 1'b0;
end 
// CR[ 3 ]
initial
begin
	CR[3] = 1'b0;
end 
// CR[ 2 ]
initial
begin
	CR[2] = 1'b0;
end 
// CR[ 1 ]
initial
begin
	CR[1] = 1'b0;
end 
// CR[ 0 ]
initial
begin
	CR[0] = 1'b1;
	CR[0] = #40000 1'b0;
end 

controller_vlg_sample_tst tb_sample (
	.clk(clk),
	.CR(CR),
	.I(I),
	.load(load),
	.LR(LR),
	.sampler_tx(sampler)
);

controller_vlg_check_tst tb_out(
	.A(A),
	.AT(AT),
	.DC(DC),
	.M(M),
	.MC(MC),
	.T(T),
	.sampler_rx(sampler)
);
endmodule

