// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/05/2023 16:36:31"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    nmm
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module nmm_vlg_vec_tst();
// constants                                           
// general purpose registers
reg b0;
reg b1;
reg b2;
reg b3;
reg clk;
reg sqr_in;
reg sqr_out;
// wires                                               
wire [7:0] dd0;
wire [7:0] dd1;
wire [7:0] dd2;
wire [7:0] dd3;
wire [7:0] dd4;
wire [7:0] dd5;

// assign statements (if any)                          
nmm i1 (
// port map - connection between master ports and signals/registers   
	.b0(b0),
	.b1(b1),
	.b2(b2),
	.b3(b3),
	.clk(clk),
	.dd0(dd0),
	.dd1(dd1),
	.dd2(dd2),
	.dd3(dd3),
	.dd4(dd4),
	.dd5(dd5),
	.sqr_in(sqr_in),
	.sqr_out(sqr_out)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #5000 1'b1;
	#5000;
end 

// sqr_in
always
begin
	sqr_in = 1'b0;
	sqr_in = #50000 1'b1;
	#50000;
end 

// sqr_out
initial
begin
	sqr_out = 1'b1;
	# 30000;
	repeat(9)
	begin
		sqr_out = 1'b0;
		sqr_out = #50000 1'b1;
		# 50000;
	end
	sqr_out = 1'b0;
	sqr_out = #50000 1'b1;
end 

// b0
initial
begin
	b0 = 1'b0;
	b0 = #70000 1'b1;
	b0 = #10000 1'b0;
	b0 = #70000 1'b1;
	b0 = #10000 1'b0;
end 

// b1
initial
begin
	b1 = 1'b0;
	b1 = #30000 1'b1;
	b1 = #10000 1'b0;
	b1 = #10000 1'b1;
	b1 = #10000 1'b0;
	b1 = #30000 1'b1;
	b1 = #10000 1'b0;
	b1 = #30000 1'b1;
	b1 = #10000 1'b0;
	b1 = #30000 1'b1;
	b1 = #10000 1'b0;
	b1 = #10000 1'b1;
	b1 = #10000 1'b0;
	b1 = #30000 1'b1;
	b1 = #10000 1'b0;
end 

// b2
initial
begin
	b2 = 1'b0;
end 

// b3
initial
begin
	b3 = 1'b0;
	b3 = #10000 1'b1;
	b3 = #10000 1'b0;
	b3 = #90000 1'b1;
	b3 = #10000 1'b0;
	b3 = #90000 1'b1;
	b3 = #10000 1'b0;
	b3 = #30000 1'b1;
	b3 = #10000 1'b0;
	b3 = #10000 1'b1;
	b3 = #10000 1'b0;
end 
initial 
begin 
#1000000 $finish;
end 
endmodule

